#include "debug.h"
#include "ch32v30x.h"

/**
* @brief  init
* @param  None
* @retval None
* @example
**/
void gpio_init(void)
{
    GPIO_InitTypeDef GPIO_InitStructure = {0};
    EXTI_InitTypeDef EXTI_InitStructure = {0};
    NVIC_InitTypeDef NVIC_InitStructure = {0};

    /*打开挂载GPIO总线的复用时钟(GPIO除了输入输出的其它功能都叫做复用功能,所以需要打开复用时钟); 打开GPIOA时钟线*/
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOB, ENABLE);
    /*设置GPIO*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;//pin
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; //下拉
    GPIO_Init(GPIOB, &GPIO_InitStructure);

    /*设置GPIO*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;//pin
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; //下拉
    GPIO_Init(GPIOB, &GPIO_InitStructure);

    /*设置作为中断线的GPIO引脚*/
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource6);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource7);
    /*设置GPIO中断*/
    EXTI_InitStructure.EXTI_Line = EXTI_Line6;//中断线
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;//中断模式
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;//上升沿触发
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;//使能
    EXTI_Init(&EXTI_InitStructure);

    /*设置GPIO中断*/
    EXTI_InitStructure.EXTI_Line = EXTI_Line7;//中断线
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;//中断模式
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;//上升沿触发
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;//使能
    EXTI_Init(&EXTI_InitStructure);

    /*配置中断优先等级*/
    NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;//外部中断
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;//抢占式优先级
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;//响应式优先级
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//使能
    NVIC_Init(&NVIC_InitStructure);
}


/**
* @brief  中断函数
**/
__attribute__((interrupt("WCH-Interrupt-fast"))) //中断函数前加这上这句,告诉编译器这个是中断函数
void EXTI9_5_IRQHandler(void)
{
    if(EXTI_GetITStatus(EXTI_Line6)!=RESET)//产生中断
    {
        printf("666666666666\r\n");
        EXTI_ClearITPendingBit(EXTI_Line6);//清除中断标志
    }
    else if(EXTI_GetITStatus(EXTI_Line7)!=RESET)//产生中断
    {
        printf("777777777777\r\n");
        EXTI_ClearITPendingBit(EXTI_Line7);//清除中断标志
    }
}


int main(void)
{
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);//设置优先级分组为2
    USART_Printf_Init(115200);
    Delay_Init();
    gpio_init();
    while(1)
    {

    }
}